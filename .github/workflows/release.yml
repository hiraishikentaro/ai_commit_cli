name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  discussions: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true

  build-release:
    needs: create-release
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3

      - name: Setup cross-compilation for Apple Silicon
        if: matrix.cross
        run: |
          rustup target add aarch64-apple-darwin

      - name: Build target
        run: |
          # Set SDKROOT for macOS builds
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            export SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
          fi

          # Build the target
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare archive
        shell: bash
        run: |
          staging="ai_commit_cli-${{ matrix.target }}"
          mkdir -p "$staging"

          # Copy the binary
          cp "target/${{ matrix.target }}/release/ai_commit_cli" "$staging/"

          # Create archive
          tar czf "$staging.tar.gz" "$staging"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ai_commit_cli-${{ matrix.target }}.tar.gz
